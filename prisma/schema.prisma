// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                       @id @default(uuid())
  username                   String?                      @unique @default(cuid())
  name                       String?
  email                      String?                      @unique
  emailVerified              DateTime?
  image                      String?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  accounts                   Account[]
  sessions                   Session[]
  UserShelterRole            UserShelterRole[]
  UserAuthenticationStrategy UserAuthenticationStrategy[]
}

model UserAuthenticationStrategy {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  sub        String
  strategy   String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Animal {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  modifiedAt DateTime? @updatedAt
  birthday   DateTime? @default(now())
  name       String    @unique
  status     String?
  category   String?
  meta       Json?
  shelter    Shelter?  @relation(fields: [shelterId], references: [id])
  shelterId  String?
}

model Shelter {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  modifiedAt      DateTime?         @updatedAt
  name            String            @unique
  address         Json?
  meta            Json?
  Animal          Animal[]
  UserShelterRole UserShelterRole[]
}

model UserShelterRole {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  modifiedAt DateTime? @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  shelter    Shelter   @relation(fields: [shelterId], references: [id])
  shelterId  String
  role       String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
